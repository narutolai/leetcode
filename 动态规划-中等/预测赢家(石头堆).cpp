// 给定一个表示分数的非负整数数组。 玩家1从数组任意一端拿取一个分数，随后玩家2继续从剩余数组任意一端拿取分数，然后玩家1拿，……。
// 每次一个玩家只能拿取一个分数，分数被拿取之后不再可取。直到没有剩余分数可取时游戏结束。最终获得分数总和最多的玩家获胜。
// 给定一个表示分数的数组，预测玩家1是否会成为赢家。你可以假设每个玩家的玩法都会使他的分数最大化。

// 示例 1:

// 输入: [1, 5, 2]
// 输出: False
// 解释: 一开始，玩家1可以从1和2中进行选择。
// 如果他选择2（或者1），那么玩家2可以从1（或者2）和5中进行选择。如果玩家2选择了5，那么玩家1则只剩下1（或者2）可选。
// 所以，玩家1的最终分数为 1 + 2 = 3，而玩家2为 5。
// 因此，玩家1永远不会成为赢家，返回 False。
// 示例 2:

// 输入: [1, 5, 233, 7]
// 输出: True
// 解释: 玩家1一开始选择  1。然后玩家2必须从5和7中进行选择。无论玩家2选择了哪个，玩家1都可以选择233。
// 最终，玩家1（234分）比玩家2（12分）获得更多的分数，所以返回 True，表示玩家1可以成为赢家。

class Solution
{

    //不外乎是一道动态规划
    //搞清楚递增的状态是什么
    //已经在每一个状态可能的选择，
    //状态和状态之间是怎么联系的

public:
    bool PredictTheWinner(vector<int> &nums)
    {
        int m = nums.size();
        if (m < 3)
            return true;
        vector<vector<pair<int, int>>> dp(m, vector<pair<int, int>>(m));

        //初始化对角线上元素 这个遍历太复杂了
        for (int i = 0; i < m; i++)
            dp[i][i] = {nums[i], 0};

        for (int k = 1; k < m; k++)
            for (int i = 0; i + k < m; i++)
            {
                int j = i + k;
                //   i ,i+1......j-1,j
                int left = nums[i] + dp[i + 1][j].second;  //面对 i,j先手i 则 i+1,j的后手
                int right = nums[j] + dp[i][j - 1].second; //
                // 题目说,给定一个表示分数的数组，预测玩家1是否会成为赢家。你可以假设每个玩家的玩法都会使他的分数最大化。
                if (left > right)
                    dp[i][j] = {left, dp[i + 1][j].first};
                else
                    dp[i][j] = {right, dp[i][j - 1].first};
            }
        return dp[0][m - 1].first >= dp[0][m - 1].second;//预测玩家1是否会成为赢家,假设每一个玩家的玩法都会使他的分数最大化
    }
};
//依旧是动态规划，初始条件就是只有一块石头时的状态，先手后手自然可以知道分数是多少
//随着石头块的增加，也就是填补数组的时候，，
//想清楚动态规划是关键 想想初始状态 想想后来的情况
//起初 只有一块石头  先手 就是石头得分 后手是0
//接着有两块石头，先手自然是两块中最大的分的一块 ，后手就是两块石头中得分比较小额一块 
//接着三块石头 1 2 3 ，先手一眼是看不出来的，我也不知道是是先手拿左边的1,然后加上2,3的后手，还是先手右边的3, 所以这个要看max(1+<2,3>.second, 3+<1,2>.second) 哪个最大了，后手就是剩下两块的先手了
//所以这就是动态规划 从最小的一个解到最后的一个解答
//动态规划 从小到大