// 一条包含字母 A-Z 的消息通过以下方式进行了编码：

// 'A' -> 1
// 'B' -> 2
// ...
// 'Z' -> 26
// 给定一个只包含数字的非空字符串，请计算解码方法的总数。

// 示例 1:

// 输入: "12"
// 输出: 2
// 解释: 它可以解码为 "AB"（1 2）或者 "L"（12）。
// 示例 2:

// 输入: "226"
// 输出: 3
// 解释: 它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。


//类似爬楼梯问题

class Solution
{
public:
    int numDecodings(string s)
    {
        if (s[0] == '0')
            return 0;
        int n = s.size();
        int dp[n] = {0};
        dp[0] = 1; //1-9这9种情况
        //对dP的遍历和字符串的遍历不要搞这么复杂啊
        for (int i = 1; i < n; i++)
        {
            if (s[i] == '0') //10或者20这两种情况
                if (s[i - 1] == '1' || s[i - 1] == '2')
                    dp[i] = (i - 2 < 0 ? 1 : dp[i - 2]);
                else
                    return 0; //比如字符串30就无解
            //11-19 以及21-26的情况
            else if (s[i - 1] == '1' || (s[i - 1] == '2' && s[i] >= '1' && s[i] <= '6'))
                dp[i] = dp[i - 1] + (i - 2 < 0 ? 1 : dp[i - 2]);//这个像不像斐波那契数列
            //123=12+3=1+1+1=3
            //比如123的结果就是2和3组合dp[i-2]加上2不和3组合即dp[i-1]的结果
            else
                dp[i] = dp[i - 1]; //其他所有非法情况
                                   //比如227 和22的结果是一样的因为27不能被解码
        }
        return dp[n - 1];
    }
};
//待看