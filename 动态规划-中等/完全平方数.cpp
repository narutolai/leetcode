// 给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。

// 示例 1:

// 输入: n = 12
// 输出: 3
// 解释: 12 = 4 + 4 + 4.
// 示例 2:

// 输入: n = 13
// 输出: 2
// 解释: 13 = 4 + 9.

class Solution
{
public:
    int numSquares(int n)
    {
        vector<int> dp(n + 1, 0);
        for (int i = 0; i <= n; i++)
        {
            dp[i] = i;
            for (int j = 1; i - j * j >= 0; j++)//遍历所有的平方数 1 4 9 16
            {
                dp[i] = min(dp[i], dp[i - j * j] + 1);
            }
        }
        return dp[n];
    }
};
//依旧是先口述一遍 把dp方程想出来以及其遍历方式也想出来。
//n从1开始慢慢增加 dp[4] = min(dp[4], dp[4-2*2] +1);
//还是用实际例子
//dp[20] = min(dp[20], dp[20-1] + 1),,20-4 ,20 -9 , 20-16,