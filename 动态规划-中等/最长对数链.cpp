// 给出 n 个数对。 在每一个数对中，第一个数字总是比第二个数字小。

// 现在，我们定义一种跟随关系，当且仅当 b < c 时，数对(c, d) 才可以跟在 (a, b) 后面。我们用这种形式来构造一个数对链。

// 给定一个对数集合，找出能够形成的最长数对链的长度。你不需要用到所有的数对，你可以以任何顺序选择其中的一些数对来构造。

// 示例 :

// 输入: [[1,2], [2,3], [3,4]]
// 输出: 2
// 解释: 最长的数对链是 [1,2] -> [3,4]
// 注意：

//这不就是区间不相交问题吗
// 给出数对的个数在 [1, 1000] 范围内。

class Solution
{
public: //区间问题
        //贪心问题
    int findLongestChain(vector<vector<int>> &pairs)
    {
        //先按照结束时间排序 sort可以传lambda表达式啊
        sort(pairs.begin(), pairs.end(), [&](const vector<int> &A, const vector<int> &B) {
            return A[1] < B[1];
        });

        int res = 1;
        int maxend = pairs[0][1];

        for (int i = 1; i < pairs.size(); i++)
        {
            auto &cur = pairs[i]; //如果当前区间的起始大于上一个的结束
            if (cur[0] > maxend)
            {
                res++;
                maxend = cur[1];
            }
        }
        return res;
    }
};
//遍历次数 2
//我的问题是为啥子  要以结束时间排序呢
// a----b
//        c----d
//         e--f
//如果 e c都大于 b 你是选c还是选e呢 肯定选e---f 因为你知道f结束时间更早。，这就是先按结束时间排序的原因
//这个是不要衔接，下一个的起点要大于当前段的终点，要选择尽可能多的片段，
//有一道题是视频剪辑 下一个的起点要小于当前段的终点，要用最少的片段剪出完整的视频长度，因为是最少的片段 所以我们要求以开始时间排序，开始时间相同的以结束时间排序
//我们总是找结束时间最长的，这样我们可以有最少的片段