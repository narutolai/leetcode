一些特别基础的 ，因为自己不做c++开发所以就记录下了。
1.使用new和不使用new的区别

new和不new的区别是类百型分配的内存位置。
不new的类型对象内存分配是在栈区，这个地方比较小，一般只有几M的空间。
一般对度于内置类型比如int、char等如果需要的内存不多的情况下，可以不用知new。
这时候的内存会在当前函数结束后自动释放。
需要New的时候一般对于复杂类型，这时候内存分配是在道堆区。比如专自定义的类类型，或者需要大量内存空间的时候，
比如你需要一个10000个int的数组，这时候你就需要new一下了。new的对象内存是需要我们手动释放的，否则会造成内存泄露。

2.结构体的创建
struct node
{
    int a;
    struct *node next;
}

3. node c; 结构体变量 用c.a访问。
   node *p; //结构体指针。p->a访问。
   
4.关于我对指针的误解
#include <iostream> 
void foo(char *p)
{
   p = "after foo()";
}     
void main()
{
   char *p = "before foo()";
   foo(p);     
   cout <<p <<endl;   
}
起初我想通过这个函数改变p的值，指针也虽然是地址，但在上面函数中
指针也是一种变量类型，和int double 一样只不过他的内容是地址，传入到foo()
函数中时，也是值传递，所以不会对原来的值做出改变。
foo()中的p还是一个局部变量，指针就是内容是地址的变量，
int a 就是这个内存单元存储整形,
int *a就是这个内存单元存储一个整形地址，
&a就是取他的地址，即 int *a=&b,b是一个整形，
只有&a才是真正的取地址！！！注意啊！！

有三种办法
1.使用return。
2.使用引用
3.传入地址
