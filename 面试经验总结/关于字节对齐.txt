0什么是泛型编程？
https://baike.baidu.com/item/%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B/6787248
https://blog.csdn.net/doctorwing/article/details/95926697
泛型编程（Generic Programming）最初提出时的动机很简单直接：发明一种语言机制，能够帮助实现一个通用的标准容器库。所谓通用的标准容器库，就是要能够做到，比如用一个List类存放所有可能类型的对象这样的事；泛型编程让你编写完全一般化并可重复使用的算法，其效率与针对某特定数据类型而设计的算法相同。泛型即是指具有在多种数据类型上皆可操作的含义，与模板有些相似。STL巨大，而且可以扩充，它包含很多计算机基本算法和数据结构，而且将算法与数据结构完全分离，其中算法是泛型的，不与任何特定数据结构或对象类型系在一起。

1.字节对齐
struct MyStruct
{
  char dda; //偏移量为0，满足对齐方式，dda占用1个字节；
  double dda1;//下一个可用的地址的偏移量为1，不是sizeof(double)=8的倍数，需要补足7个字节才能使偏移量变为8（满足对齐方式），因此VC自动填充7个字节，dda1存放在偏移量为8的地址上，它占用8个字节。
  int type； //下一个可用的地址的偏移量为16，是sizeof(int)=4的倍数，满足int的对齐方式，所以不需要VC自动填充，type存放在偏移量为16的地址上，它占用4个字节。
}；
所有成员变量都分配了空间，空间总的大小为1+7+8+4=20，不是结构的节边界数（即结构中占用最大空间的类型所占用的字节数sizeof(double)=8）的倍数，所以需要填充4个字节，
以满足结构的大小为sizeof(double)=8的倍数。所以该结构总的大小为：sizeof(MyStruc)为1+7+8+4+4=24。其中总的有7+4=11个字节是VC自动填充的，没有放任何有意义的东西。
https://blog.51cto.com/yebaoshan/2108111
2.进程栈一般多大，怎么撑爆？


1.自我介绍一下自己
2.熟悉操作系统，能相关介绍你了解的操作系统知识吗

3.了解进程和线程吗，进程和线程之间有什么区别
进程是资源分配（处理机除外）的基本单位，线程是程序执行（资源调度）的最小单位
进程有自己的独立空间每启动一个进程系统会为他分配地址空间，建立数据表来维护代码段、堆栈段、和数据段这种操作非常昂贵。
而线程共享进程线程之间的通信更方便，同一进程下的线程共享全局变量、静态变量等数据，而进程之间的通信需要以通信的方式（IPC)进行。不过如何处理好同步与互斥是编写多线程程序的难点。
但是多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间
线程之间的通信更方便，同一进程下的线程共享全局变量、静态变量等数据，而进程之间的通信需要以通信的方式（IPC)进行。不过如何处理好同步与互斥是编写多线程程序的难点。
但是多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间

4进程和线程的资源
堆：是大家共有的空间，分全局堆和局部堆。全局堆就是所有没有分配的空间，局部堆就是用户分配的空间。堆在操作系统对进程初始化的时候分配，运行过程中也可以向系统要额外的堆，但是记得用完了要还给操作系统，要不然就是内存泄漏。
栈：是个线程独有的，保存其运行状态和局部自动变量的。栈在线程开始的时候初始化，每个线程的栈互相独立，因此，栈是　thread safe的。操作系统在切换线程的时候会自动的切换栈，就是切换　ＳＳ／ＥＳＰ寄存器。栈空间不需要在高级语言里面显式的分配和释放。

4.1什么是堆和栈
http://blog.chinaunix.net/uid-23215128-id-2521223.html 这个厉害了。
https://blog.csdn.net/yingms/article/details/53188974?utm_source=blogxgwz2
https://blog.csdn.net/yoxiyehei_wzx/article/details/51260143
5.进程安全

6.实现多线程的方式有那些
7.生产者-消费者模式实现，生产者将资源产出放入一个队列中，消费者消费队列中的资源，如何实现在队列为空时，关停所有消费者进程，队友不为空时，开启消费者进程进行消费
8.数据库sql语句查询，跨表查询有哪几种方式
9.跨表查询分别在那些情况下使用
10.算法题一，长度为n的数组，有一个长度为k的滑动窗口，询问各个滑动窗口内的中位数。
11.算法题二，二维数组从上到下从左到右单调递增，要求O(n)复杂度数量级内查找出二维数组内是否存

12.struct和union的区别，给出struct和union的例子，问各自占用多少内存。struct有内存对齐，说说什么是内存对齐。
#https://blog.csdn.net/liguangxianbin/article/details/80510669

13.struct和class的区别。为什么class有this而struct没有（不知道，难道是要我说this用来指向该类的实例）

14.进程和线程的区别，各自适用的场景

15.死锁的条件（忘了互斥这一点）

16.一个线程会死锁吗？我说不会。。他说如果我说会，你能想到是什么原因吗？我说想不到。。

17.乐观锁与悲观锁（不会）

18.TCP与UDP的区别

19.HTTP请求过程

20.hashmap的实现，冲突时除了链表还有什么方法，读的时间复杂度

21.vector的实现

22.做题，颜色如#AABBCCDD转成四个int

23.做题，动态构建二维数组，不能用vector，我用了malloc，然后问怎样析构，再加上free

24.做题，寻找无序数组的中位数，讲解
