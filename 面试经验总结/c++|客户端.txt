抖音c++开发实习
1.手撕最长无重复字符字串。
  利用滑动窗口思想，滑动窗口内的字符将不会重复，滑动窗口利用两个索引i,j分别指向窗口的前后界限，通过分别移动i，j指针来寻求最大子串长度。
  
2std::unordered_map/std::map的区别
https://jingyan.baidu.com/album/851fbc377ed5f73e1e15ab10.html?picindex=1
    map                    unordermap
递增顺序                    无顺序
self balancing bst          采用哈希表数据结构
红黑树
log(n)                  平均o(1) 最坏 o(n)   搜索时间
log(n)+再平衡时间         同上               插入时间
log(n)+balance            同上               删除时间
如果你想要输出的数据有顺序 可以使用map
如果只是单纯记录数据使用unorder_map

3.对智能指针有多少了解？https://www.cnblogs.com/WindSun/p/11444429.html
std::weak_ptr如何转std::shared_ptr？
std::weak_ptr::lock存在的意义是什么？
在C++程序里，使用new关键字开辟的内存必须被手动delete掉，不然就会导致
存的泄漏，但是，当程序非常冗长，你能保证自己每一个手动开辟的内存块都
释放了吗？在delete之前，倘若程序因为异常跳转后，你还能保证内存被释放
吗？为了解决这种因为遗忘或者异常处理而导致内存泄漏的问题，我们就要用智
能指针。
那篇文章忘记了 具体的意思就是利用栈上开出的内存系统会自动分配和回收，而堆上用户自己
申请的要自己手动释放，
class smartpoint(new person) 就像这样将手动申请的指针传入到智能指针类去初始化它，然后就用smart point 
替代person了，在他的析构函数中让person指针为空，此外重载->和*运算符号，这种替代方式 很妙啊。



4.C++各种虚函数、重载，多态，访问权限public和继承，static关键词看代码写输出。
纯虚函数是在基类中后面加上等于0不用写实现 定义即可，重载是在一个类中名字相同但是参数不同返回值不同的函数。
多态是在不同的子类中对基类中同一个函数进行不同的实现，被实现的那个函数为了防止静态链接要在基类函数前加上 virtual关键字。
一个类成员变量前加上static关键词https://www.runoob.com/cplusplus/cpp-static-members.html
无论创建多少个类的对象，静态成员都只有一个副本，不能在类中定义时候初始化，不初始化默认为0，可以在类的外部通过范围解析运算符::来
重新声明静态变量从而对它进行初始化。
一个类成员函数前家上static关键词，那么该函数和类的任何特定对象独立开来，即使类对象不存在也可以调用，访问的时候要使用范围解析运算符::
例如：cout << "Inital Stage Count: " << Box::getCount() << endl;
静态成员函数只能访问静态成员数据、其他静态成员函数和类外部的其他函数。
类的共有变量外部可以访问，不需要通过成员函数来设置值和获取值,类内访问就是通过类内的函数来访问。
类的私有成员变量或函数在类的外部是不可访问的，甚至是不可查看的，只有类和友元函数可以访问私有成员，也不能被子类访问。
保护成员变量或函数与私有成员十分相似，类外不可访问，只有类和友元函数可以访问，但有一点不同，保护成员在派生类（即子类）中是可访问的。
拷贝构造函数：特殊的构造函数 拷贝拷贝 就是这个意思 用之前的对象来初始化新创建的对象Line( const Line &obj); 拷贝构造函数
友元函数：在一个类内被声明前加上friend关键词,在类外部被定义不需要加上范围解析符就和平常函数定义一样，他不是类成员函数，但是可以访问类的任何成员。
如果要声明一个A类为B类友元，直接在B类定义中放如下声明：friend class ClassB;
内联函数：调用处直接展开。一般适用于比较短的函数，三行之内吧。


5.实现#define max(a, b, c)
c++预处理的知识宏定义预处理器是一些指令，指示编译器在实际编译之前所需完成的预处理。
所有的预处理器指令都是以井号（#）开头，只有空格字符可以出现在预处理指令之前。预处理指令不是 C++ 语句，所以它们不会以分号（;）结尾。
我们已经看到，之前所有的实例中都有 #include 指令。这个宏用于把头文件包含到源文件中。
C++ 还支持很多预处理指令，比如 #include、#define、#if、#else、#line 等，让我们一起看看这些重要指令。
https://www.runoob.com/cplusplus/cpp-preprocessor.html
参数宏
#define max_(a,b) (a>b?a:b)
#define max(a,b,c) (a>max_(b,c)?a:max_(b,c)) 可以吧

条件编译：
有几个指令可以用来有选择地对部分程序源代码进行编译。这个过程被称为条件编译。
条件预处理器的结构与 if 选择结构很像。请看下面这段预处理器的代码：
#ifdef NULL
   #define NULL 0
#endif
就是如果预定义了宏debug 就执行下面的操作
注释掉要编译的内容
#if 0
   不进行编译的代码
#endif
#define DEBUG
#define MIN(a,b) (((a)<(b)) ? a : b)
int main ()
{
   int i, j;
   i = 100;
   j = 30;
#ifdef DEBUG
   cerr <<"Trace: Inside main function" << endl;
#endif
cerr 是标准错误输出流，不需要缓存，不可被重定向。
}
预定义的宏
__LINE__	这会在程序编译时包含当前行号。
__FILE__	这会在程序编译时包含当前文件名。
__DATE__	这会包含一个形式为 month/day/year 的字符串，它表示把源文件转换为目标代码的日期。
__TIME__	这会包含一个形式为 hour:minute:second 的字符串，它表示程序被编译的时间。

6.对3D有什么了解

7.析构函数可以是纯虚函数吗

8.内存池了解过吗，为什么要有内存池
通常，我们都采用NEW或者malloc动态申请内存。一般来说，少量的操du作不会造成什么zhi影响，但是，如果我们dao频繁去申请内存块，会造成效率上的损失，
更有甚者，我造成内存碎片的存在，从而影响系统的效率（所有程序都可能受到影响），
一种最常见的解决办法就是一次性申请一个大点的内存块，每次需要的时候就"切"一块下来用，如果该内存块不够才去申请内存。
这种技术叫做内存池。一般来说，内存池对于每次申请固定大小的内存的应用（比较频繁）会比较有好处。

9.什么是内存碎片，为什么会有内存碎片，如何处理内存碎片
内存碎片分bai为：内部碎片和外部碎片
内外是相对于进程而言的，
内部碎片就是已zhi经被分配出去（dao能明确指出属于哪个进程）却不能被利用的内存空间；
外部碎片指的是还没有被分配出去（不属于任何进程），但由于太小了无法分配给申请内存空间的新进程的内存空闲区域。

10.C++反射有了解过吗，标准有吗，第三方库呢，说说看
11.命令模式是什么
12.工厂模式是什么，写一个看看?????
13.不允许分发实际代码让对方修改，但是对方想添加新功能，如何实现，有什么模式可以做到吗?
14.详细介绍快排,基数排序。
基数排序：先LSD先按照个位数排序，然后串起来 再按十位排序。
快速排序：确定一个基准数，让小于它的数在它左边 大于它的数在它右边。

15.如何选择基准数
错误方法：通常的、没有经过充分考虑的选择是将第一个元素做为"基准“。如果输入书随机的，那么这是可以接受的，但是如果输入是预排序的或是反序的，那么这样的”基准“就是一个劣质的分割，因为所以的元素不是被划入S1就是被划入S2。实际上，如果第一个元素用作”基准“而且输入是预先排序的，那么快速排序花费的时间将是二次的，可是实际上却没干什么事，因此，使用第一个元素作为”基准“是绝对糟糕的。
昂贵方法：一种安全的方法是随机选取”基准“。这种策略是非常安全的，除非随机生成器有问题，但是随机数的生成一般是昂贵的，减少不了算法其余部分的平均运行时间。
三分方法：一组N个数的中值是第[N/2]个最大的数。”基准“的最好选择是数组的中值。但是这很难算出，且减慢快速排序的速度。这样的中值的估计量可以通过随机选取三个元素并用它们的中值作为”基准”而得到。实际上，随机性并没有多大的帮助，因此一般的做法是使用左端、右端和中心位置上的三个元素的中值作为“基准”。

16.随机选择基准数万一每次都选到了最坏的情况呢，如何处理？如何确保时间复杂度

17.为什么快排时序列长度短的情况下会选择其他排序，优点在哪

18.如何处理快速排序最坏的情况

19你最自豪的事情是什么
20你的优点是什么
21有什么值得分享的经历吗
22如何测试你的项目的
23如何保证你的项目质量
24对方满意你的进度吗
25你自己实现的字符串类支持宽字符吗，实现了多少函数，满足工程需要吗
26你说你喜欢研究STL和Qt，为什么呢
27你说你喜欢了解C++的新特性，但是不可能组里每个人都因为你使用新特性而更换编译器版本，为什么还要拼命追求那么多新特性呢
